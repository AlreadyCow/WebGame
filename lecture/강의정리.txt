# 2강. 끝말잇기
* Hooks 특징 (https://ddwroom.tistory.com/75)
ㅇ 장점
 - 코드의 양을 줄여 간결한 코드를 작성할 수 있음
 - 가독성이 좋은 코드를 작성할 수 있음
  (개발자들의 needs를 반영한 기능으로 
  class로 작성시 this에 대한 소스가독성이 떨어지고, 
  기능 구현시 초기값, 핸들러, value등 지정이 건드릴 곳이 많아 이에 대한 해결책으로 등장한것이.. hooks다..
  
  react에서도 hooks를 권장하고 있다 - 제로초
  최근 새로운 라이브러리도 hooks를 기반으로 지원하고 있어.. hooks 사용을 권장
  )
 - 라이프사이클 메서드보다 단순함
    useState, useEffect, useContext 3가지의 훅을 조합해서 나머지 훅을 파생하여 요구사항의 대부분 해결 가능

ㅇ 단점
 - 지원하지 않는 기능이 존재함 (class와 혼용해서 사용해야함 / ex> getSnapshotBeforeUpdate, componentDidCatch) 
 - 클래스에서 사용 불가

ㅇ 유의점
- Hooks는 어떠한 조건문으로도 감싸지 않고 항상 순서대로 호출해야함

* 웹팩 (https://velog.io/@jeff0720/React-%EA%B0%9C%EB%B0%9C-%ED%99%98%EA%B2%BD%EC%9D%84-%EA%B5%AC%EC%B6%95%ED%95%98%EB%A9%B4%EC%84%9C-%EB%B0%B0%EC%9A%B0%EB%8A%94-Webpack-%EA%B8%B0%EC%B4%88)
 - 모듈 번들러 : 여러개로 나뉘어져있는 파일들을 하나의 파일로 만들어주는 라이브러리로 웹팩,parcel 등이 있음
 - 모듈 번들러는 여러개의 자바스크립트 파일을 하나의 파일로 묶어서 한 번에 요청을 통해 가지고 올 수 있게 하고 최신 자바스크립트 문법을 브라우저에서 사용할 수 있게 해줌
 - 자바스크립트 코드들을 압축하고 최적화 할 수 있기 때문에 로딩 속도를 높일 수 있음
 - 많은 자바스크립트 파일이 하나의 파일로 묶인다면 초기 로딩 속도가 오래걸릴 수 있으나, 이런 문제를 해결하기 위해 청크, 캐시, 코드 스플릿 개념들을 도입하면서 문제들을 해결하고 있음

* 웹팩 데브 서버 (https://velog.io/@nsunny0908/React-Webpack-dev-server%EC%99%80-%ED%95%AB-%EB%A6%AC%EB%A1%9C%EB%94%A9)
 - 웹팩에서 제공하는 웹서버를 구축하여 변경사항이 실시간으로 반영하여 확인할 수 있음
 - 강의에서 사용한 plugin : RefreshWebpackPlugin

* 핫 리로딩 (http://daplus.net/javascript-react-native%EC%9D%98-%ED%95%AB-%EB%A6%AC%EB%A1%9C%EB%94%A9%EA%B3%BC-%EB%9D%BC%EC%9D%B4%EB%B8%8C-%EB%A6%AC%EB%A1%9C%EB%94%A9%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80-%EB%AC%B4/)
 - 기존 상태를 잃지않고 변경된 파일만 새로고침됨
    ex) Live Reloading : 전체 앱을 처음부터 다시 시작함
        Hot Reloading : 앱을 처음부터 다시 시작하지 않고, 새로운 코드 변경에 따른 코드 변경 사항만 표시하며, 변경된 코드에만 적용됨

# 6강. 로또 추첨기
** 리액트의 렌더링 성능 최적화를 위한 Hook **
(https://leehwarang.github.io/2020/05/02/useMemo&useCallback.html)
* useMemo : 의존성배열에 넘겨준 값이 변경되었을 때만 기억된 값을 다시 계산함
            복잡한 함수 결과값을 기억함 - 성능 문제 해결에 도움

* useCallback : 함수가 매번 재선언되면 하위 컴포넌트에서 넘겨 받은 함수가 달라졌다고 인식하여 재실행 될 수 있으므로 useCallback사용하여 최적화할 수 있음
                Hooks는 함수 생성이 매번 이루어지지만.. useCallback을 이용하면 해당 함수를 새로 생성하지 않고, 기억하고있는 함수를 반환
                useCallback사용시 이용되는 state는 반드시 useCallback의 두번째인자에 넣어주어야 변경된 값을 기억함(안쓰면 첫번째 값을 계속 기억함..)
                자식 컴포넌트에 props로 함수를 전달할 때는 필수로 useCallback 사용해야함!!!